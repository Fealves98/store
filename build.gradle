plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.stockManagement'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

tasks.withType(JavaCompile) {
	sourceCompatibility = 11
	targetCompatibility = 11

	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}
def mapStructVersion = "1.3.1.Final"
def lombokVersion = "1.18.12"
def springCloudVersion = "Hoxton.SR7"
def springBootVersion = "2.3.3.RELEASE"
def swaggerVersion = "2.9.2"
def wiremockVersion = "2.2.4.RELEASE"

dependencies {
	compile group: 'com.netflix.hystrix', name: 'hystrix-core', version: '1.5.18'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-actuator:2.3.4.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.3.4.RELEASE'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	implementation 'org.springframework.data:spring-data-commons:2.3.4.RELEASE'
	implementation 'javax.validation:validation-api:2.0.1.Final'

	// implementation 'io.github.openfeign:feign-httpclient:11.0'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

	runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.3.4.RELEASE'

	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.4.RELEASE'
	implementation("org.springframework.boot:spring-boot-starter-mail")
}

compileJava {
	options.compilerArgs = [
			'-Amapstruct.unmappedTargetPolicy=IGNORE',
			'-Amapstruct.defaultComponentModel=spring'
	]
}



tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
